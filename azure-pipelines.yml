trigger:
- master

variables:
  windowsDllName: "blingfiretokdll.dll"
  osxDllName: "libblingfiretokdll.dylib"
  linuxDllName: "libblingfiretokdll.so"
  win_X64_Artifact: "DllForWinX64"
  win_Arm64_Artifact: "DllForWinArm64"
  osx_X64_Artifact: "DllForOsxX64"
  osx_arm64_Artifact: "DllForOsxArm64"
  linux_X64_Artifact: "DllForLinuxX64"
  linux_Arm64_Artifact: "DllForLinuxArm64"

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release
extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    sdl:
      sourceAnalysisPool: VSEngSS-MicroBuild2022-1ES
    pool:
      name: AzurePipelines-EO
      image: 1ESPT-Windows2022
      os: windows
    stages:
    - stage: buildAndPublish
      jobs:

# WINDOWS X64
      - job: Build_Dll_For_Win_X64
        pool:
          name: AzurePipelines-EO
          image: 1ESPT-Windows2022
          os: windows
        templateContext:
            outputs:
            - output: pipelineArtifact
              path: $(Build.ArtifactStagingDirectory)/native
              artifactName: $(win_X64_Artifact)
        steps:
        - task: UseDotNet@2
          displayName: 'Use .NET Core SDK'
          inputs:
            packageType: 'sdk'
            version: '6.x'

        - task: CmdLine@2
          displayName: Create release folder for win-x64
          inputs:
            script: |
              mkdir Release

        - task: CMake@1
          displayName: 'CMake for win-x64'
          inputs:
            workingDirectory: 'Release'
            cmakeArgs: '..'

        - task: MSBuild@1
          displayName: 'Build for win-x64'
          inputs:
            solution: 'Release/BLING_FIRE.sln'
            configuration: 'Release'

        - task: CmdLine@2
          displayName: 'Validate dll for win-x64'
          inputs:
            script: |
              cd .\nuget\test\
              dotnet build .\BlingUtilsTest.csproj
              cp ..\..\Release\Release\blingfiretokdll.dll .\bin\Debug\net6.0\
              dotnet .\bin\Debug\net6.0\BlingUtilsTest.dll
        
        - task: CopyFiles@2
          displayName: 'Copy blingfiretokdll.dll to: $(Build.ArtifactStagingDirectory)'
          inputs:
            SourceFolder: 'Release/Release'
            Contents: $(windowsDllName)
            TargetFolder: '$(build.artifactstagingdirectory)/native'

        - task: CopyFiles@2
        displayName: 'Copy blingfiretokdll.pdb to: $(Build.ArtifactStagingDirectory)'
        inputs:
          SourceFolder: 'Release/Release'
          Contents: "blingfiretokdll.pdb"
          TargetFolder: '$(build.artifactstagingdirectory)/native'

# WINDOWS ARM64
      - job: Build_Dll_For_Win_ARM64
        pool:
          name: AzurePipelines-EO
          image: 1ESPT-Windows2022
          os: windows
        templateContext:
          outputs:
          - output: pipelineArtifact
            path: $(Build.ArtifactStagingDirectory)/native
            artifactName: $(win_ARM64_Artifact)
        steps:
        - task: UseDotNet@2
          displayName: 'Use .NET Core SDK'
          inputs:
            packageType: 'sdk'
            version: '6.x'

        - task: CmdLine@2
          displayName: Create release folder for win-arm64
          inputs:
            script: |
              mkdir Release

        - task: CMake@1
          displayName: 'CMake for win-arm64'
          inputs:
            workingDirectory: 'Release'
            cmakeArgs: '-A ARM64 ..'

        - task: MSBuild@1
          displayName: 'Build for win-arm64'
          inputs:
            solution: 'Release/BLING_FIRE.sln'
            configuration: 'Release'

        - task: CopyFiles@2
          displayName: 'Copy blingFire Nuget package to: $(Build.ArtifactStagingDirectory)'
          inputs:
            SourceFolder: 'Release/Release'
            Contents: $(windowsDllName)
            TargetFolder: '$(build.artifactstagingdirectory)/native'

        - task: CopyFiles@2
          displayName: 'Copy blingfiretokdll.pdb to: $(Build.ArtifactStagingDirectory)'
          inputs:
            SourceFolder: 'Release/Release'
            Contents: "blingfiretokdll.pdb"
            TargetFolder: '$(build.artifactstagingdirectory)/native'

# OSX X64
      - job: Build_Dll_For_Osx_X64
        pool:
            name: Azure Pipelines
            image: macOS-12
            os: macOS
        templateContext:
          outputs:
          - output: pipelineArtifact
            path: $(Build.ArtifactStagingDirectory)/native
            artifactName: $(osx_X64_Artifact)
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET Core SDK'
            inputs:
              packageType: 'sdk'
              version: '6.x'

          - task: CmdLine@2
            displayName: Create release folder
            inputs:
              script: |
                mkdir Release

          - task: CMake@1
            displayName: 'CMake'
            inputs:
              workingDirectory: 'Release'
              cmakeArgs: '..'

          - task: CmdLine@2
            displayName: build project
            inputs:
              script: |
                cd ./Release
                make

          - task: CmdLine@2
            displayName: 'Validate binaries for osx-x64'
            inputs:
              script: |
                cd ./nuget/test/
                dotnet build ./BlingUtilsTest.csproj
                cp ../../Release/libblingfiretokdll.dylib ./bin/Debug/net6.0/
                dotnet ./bin/Debug/net6.0/BlingUtilsTest.dll

          - task: CopyFiles@2
            displayName: 'Copy $(osxDllName) to: $(Build.ArtifactStagingDirectory)'
            inputs:
              SourceFolder: 'Release'
              Contents: $(osxDllName)
              TargetFolder: '$(build.artifactstagingdirectory)/native'

# OSX ARM64
      - job: Build_Dll_For_Osx_ARM64
        pool:
            name: Azure Pipelines
            image: macOS-12
            os: macOS
        templateContext:
          outputs:
          - output: pipelineArtifact
            path: $(Build.ArtifactStagingDirectory)/native
            artifactName: $(osx_arm64_Artifact)
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET Core SDK'
            inputs:
              packageType: 'sdk'
              version: '6.x'

          - task: CmdLine@2
            displayName: Create release folder
            inputs:
              script: |
                mkdir Release
                
          - task: CMake@1
            displayName: 'CMake'
            inputs:
              workingDirectory: 'Release'
              cmakeArgs: '-DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_BUILD_TYPE=Release ..'

          - task: CmdLine@2
            displayName: build project
            inputs:
              script: |
                cd ./Release
                make
        
          - task: CopyFiles@2
            displayName: 'Copy $(osxDllName) to: $(Build.ArtifactStagingDirectory)'
            inputs:
              SourceFolder: 'Release'
              Contents: $(osxDllName)
              TargetFolder: '$(build.artifactstagingdirectory)/native'

# LINUX X64
      - job: Build_Dll_For_Linux_X64
        pool:
          name: AzurePipelines-EO
          image: 1ESPT-Ubuntu22.04
          os: linux
        templateContext:
          outputs:
          - output: pipelineArtifact
            path: $(Build.ArtifactStagingDirectory)/native
            artifactName: $(linux_X64_Artifact)
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET Core SDK'
            inputs:
              packageType: 'sdk'
              version: '6.x'

          - task: CmdLine@2
            displayName: Create release folder
            inputs:
              script: |
                mkdir Release

          - task: CMake@1
            displayName: 'CMake'
            inputs:
              workingDirectory: 'Release'
              cmakeArgs: '..'
    
          - task: CmdLine@2
            displayName: build project
            inputs:
              script: |
                cd ./Release
                make
          
          - task: CmdLine@2
            displayName: 'Validate binaries for linux-x64'
            inputs:
              script: |
                cd ./nuget/test/
                dotnet build ./BlingUtilsTest.csproj
                cp ../../Release/libblingfiretokdll.so ./bin/Debug/net6.0/
                dotnet ./bin/Debug/net6.0/BlingUtilsTest.dll
          
          - task: CopyFiles@2
            displayName: 'Copy $(linuxDllName) to: $(Build.ArtifactStagingDirectory)'
            inputs:
              SourceFolder: 'Release'
              Contents: $(linuxDllName)
              TargetFolder: '$(build.artifactstagingdirectory)/native'

# LINUX ARM64
      - job: Build_Dll_For_Linux_ARM64
        pool:
          name: AzurePipelines-EO
          image: 1ESPT-Ubuntu22.04
          os: linux
        templateContext:
          outputs:
          - output: pipelineArtifact
            path: $(Build.ArtifactStagingDirectory)/native
            artifactName: $(linux_Arm64_Artifact)
        steps:
          - task: CmdLine@2
            displayName: Create release folder
            inputs:
              script: |
                mkdir Release

          - task: CmdLine@2
            displayName: Install cross-compile tools
            inputs:
              script: |
                sudo apt-get update
                sudo apt-get install -y gcc-aarch64-linux-gnu
                sudo apt-get install -y g++-aarch64-linux-gnu

          - task: CmdLine@2
            displayName: Look for compiler present on build agent  
            inputs:
              script: |
                ls /usr/bin/aarch64*

          - task: CMake@1
            displayName: 'CMake'
            inputs:
              workingDirectory: 'Release'
              cmakeArgs: '-DCMAKE_TOOLCHAIN_FILE=../buildTools/linux-arm64-cross.cmake -DCMAKE_BUILD_TYPE=Release ..'

          - task: CmdLine@2
            displayName: build project
            inputs:
              script: |
                cd ./Release
                make

          - task: CopyFiles@2
            displayName: 'Copy $(linuxDllName) to: $(Build.ArtifactStagingDirectory)'
            inputs:
              SourceFolder: 'Release'
              Contents: $(linuxDllName)
              TargetFolder: '$(build.artifactstagingdirectory)/native'

# BUILD NUGET PACKAGE
      - job: buildNugetPackage
        dependsOn: 
          - Build_Dll_For_Win_X64
          - Build_Dll_For_Win_ARM64
          - Build_Dll_For_Osx_X64
          - Build_Dll_For_Osx_ARM64
          - Build_Dll_For_Linux_X64
          - Build_Dll_For_Linux_ARM64
        condition: succeeded()
    
        pool:
          name: AzurePipelines-EO
          image: 1ESPT-Windows2022
          os: windows
        templateContext:
          outputs:
          - output: pipelineArtifact
            path: $(Build.ArtifactStagingDirectory)\nupkg
            artifactName: nupkg
        steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts for windows x64'
            inputs:
              artifactName: $(win_X64_Artifact)
              downloadPath: 'nuget/lib/runtimes/win-x64/native'
              
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts for windows arm64'
            inputs:
              artifactName: $(win_Arm64_Artifact)
              downloadPath: 'nuget/lib/runtimes/win-arm64/native'

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts for osx x64'
            inputs:
              artifactName: $(osx_X64_Artifact)
              downloadPath: 'nuget/lib/runtimes/osx-x64/native'

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts for osx arm64'
            inputs:
              artifactName: $(osx_Arm64_Artifact)
              downloadPath: 'nuget/lib/runtimes/osx-arm64/native'

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts for linux x64'
            inputs:
              artifactName: $(linux_X64_Artifact)
              downloadPath: 'nuget/lib/runtimes/linux-x64/native'

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts for linux Arm64'
            inputs:
              artifactName: $(linux_Arm64_Artifact)
              downloadPath: 'nuget/lib/runtimes/linux-arm64/native'

          - task: DotNetCoreCLI@2
            inputs:
              command: 'build'
              projects: 'nuget/lib/BlingFireNuget.csproj'
              arguments: '--configuration Release'

          - task: CopyFiles@2
            displayName: 'Copy blingFire Nuget package to: $(Build.ArtifactStagingDirectory)'
            inputs:
              SourceFolder: 'nuget/lib/bin/Release/'
              Contents: '*.nupkg'
              TargetFolder: '$(build.artifactstagingdirectory)\nupkg'

